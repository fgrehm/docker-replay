#!/bin/bash

# set -x

if [ "$#" -ne 1 ]; then
  echo "${BASH_SOURCE} <IMAGE_NAME>"
  exit 1
fi

IMAGE_NAME=${1}
BUILD_TIMESTAMP=$(date +%Y%m%d%H%M%S)

if [ $(docker images "${IMAGE_NAME}" | wc -l) -eq 1 ]; then
  echo "The '${IMAGE_NAME}' image could not be found!"
  exit 1
fi

declare -a ONBUILDS

for IMG_ID in $(docker history $IMAGE_NAME | grep -i onbuild | cut -f1 -d' '); do
  LABELS=$(docker inspect -f "{{json .ContainerConfig.Labels }}" $IMG_ID)
  if [ "${LABELS}" = '{}' ]; then
    ONBUILDS=("${IMG_ID}" "${ONBUILDS[@]}")
  else
    break
  fi
done

OUTPUT_FILE=$(mktemp)
cat <<-STR > $OUTPUT_FILE
# Automatically generated by docker-replay, you can safely delete this file
FROM ${IMAGE_NAME}:latest
LABEL rebuilt-at='${BUILD_TIMESTAMP}'
$(docker inspect -f "{{json .ContainerConfig.OnBuild }}" "${ONBUILDS[@]}" | jq -r '.[. | length - 1] | .')
STR

echo $OUTPUT_FILE
cat $OUTPUT_FILE

mv $OUTPUT_FILE `pwd`

docker build -t $IMAGE_NAME -f $(basename "${OUTPUT_FILE}") .
BUILD_EXIT_CODE=$?

rm `pwd`/$(basename "${OUTPUT_FILE}")

exit $BUILD_EXIT_CODE
